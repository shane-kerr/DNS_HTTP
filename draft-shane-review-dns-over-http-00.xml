<?xml version="1.0"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced.
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC1035 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC1123 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.1123.xml">
<!ENTITY RFC3542 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.3542.xml">
<!ENTITY RFC5246 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY RFC5625 SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.5625.xml">
<!ENTITY I-D.dnsop-cookies SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.draft-ietf-dnsop-cookies-02.xml">
<!ENTITY I-D.dnsop-respsize SYSTEM "http://xml2rfc.ietf.org/public/rfc/bibxml3/reference.I-D.draft-ietf-dnsop-respsize-15.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<?rfc tocappendix="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="3"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<?rfc comments="no" ?>
<?rfc inline="yes" ?>
<rfc category="info" docName="draft-shane-dns-over-http-00" ipr="trust200902">

  <front>

    <title>A review of implementation DNS over port 80/443</title>


    <author fullname="Linjian Song" initials="L." surname="Song">
      <organization>Beijing Internet Institute</organization>
      <address>
        <postal>
          <street>2508 Room, 25th Floor, Tower A, Time Fortune</street>
          <city>Beijing</city>
          <region></region>
          <code>100028</code>
          <country>P. R. China</country>
        </postal>
        <email>songlinjian@gmail.com</email>
        <uri>http://www.biigroup.com/</uri>
      </address>
    </author>

    <author fullname="Shane Kerr" initials="S." surname="Kerr">
      <organization>Beijing Internet Institute</organization>
      <address>
        <postal>
          <street>2/F, Building 5, No.58 Jinghai Road, BDA</street>
          <city>Beijing</city>
          <code>100176</code>
          <country>CN</country>
        </postal>
        <email>shane@biigroup.cn</email>
        <uri>http://www.biigroup.com/</uri>
      </address>
    </author>

    <author fullname="Runxia Wan" initials="R." surname="Wan">
      <organization>Beijing Internet Institute</organization>
      <address>
        <postal>
          <street>2508 Room, 25th Floor, Tower A, Time Fortune</street>
          <city>Beijing</city>
          <region></region>
          <code>100028</code>
          <country>P. R. China</country>
        </postal>
        <email>rxwan@biigroup.cn</email>
        <uri>http://www.biigroup.com/</uri>
      </address>
    </author>

    <date/>

    <!-- Meta-data Declarations -->

    <area>Internet Area</area>
    <workgroup>Internet Engineering Task Force</workgroup>

    <!-- <keyword>dns</keyword> -->

    <abstract>
      <t>
        In order to work around the difficulty of upgrading DNS over UDP/53, 
        there are various implementation of DNS over port 80/443 leveraging 、
        the merit of TCP/TLS/HTTP(s). This memo intends to review all possible 
        DNS implementations with references and hopefully deliver some useful 
        information for developers who want make their own DNS software.
      </t>

    </abstract>

  </front>

  <middle>

    <section title="Introduction">
    
    <t> RFC 1035<xref target="RFC1035"/>says the Internet support name server works on port 53 
      using both UDP and TCP. Port 53 is the well-known port allocated by 
      IANA for DNS protocol. Any new extension of DNS protocol should 
      consider backward-compatibility and progress to upgrade both the existing system and 
      DNS specification suits. However, to avoid complexity of upgrading 
      approach people now simply use different port, like 80/443 to implement 
      DNS for new DNS protocol and operation practice. </t>

  <t>There are several use cases: </t>
  <t> <list style="symbols">
    <t>Case 1: for enhancing the availability of DNS service, people disguise DNS 
      traffic into Web traffic using port 80/443 over TCP or HTTP. It can bypasses 
      firewall or other middle box on path which may jeopardize normal DNS 
      traffic by misbehavior <xref target="RFC5625"/> <xref target="DOTSE"/> <xref target="SAC035"/>.</t>

    <t>Case 2: Based on good reachability of DNS, stub resolver can choose any reliable 
      and secure resolver as its cache server, other than cache server provisioned 
      by local ISP or small hotel. In some ISPs and hotels, Stub client usually 
      complains and suffers from ad injection on web page, DNS hijack and even 
      geographic misleading by centralized resolver distant from client.</t>

    <t>Case 3:Using port 443, DNS over TLS/HTTPS provides encryption method to protect 
      privacy.</t>

    <t>Case 4: To provide a higher level DNS API for developer like web developer to 
      access DNS information and new DNS features. In this case DNS data is exchanged 
      using JSON, XML or other format which also relied the transmission of HTTP(s) 
      on 80/443.</t>

  </list></t>

    <t>This memo is not aiming to develop tools or standard for above use cases. 
      The purpose here is to provide a review by compare and list all possible 
      implementation options for developing reference. If interest from anyone 
      hoping to explore future research or specification of DNS over 80/443, 
      hopefully this memo can help.</t>

    <t>Noted that most of the implementations described in this memo is on port 
      80/443 and combined with TCP/TLS/HTTP(s). And the main scenario focus between 
      stub resolver and recursive server, so all the discussion after is only 
      applicable in the side between client and resolvers.</t>

    </section>

    <section title="Different implementations approaches">

      <section title="DNS over TCP on port 80/443">
        
      <t>One simplest approach might be straightly moving the DNS traffic to port 80 or 443 
        from 53. This approach serve the requirement use case 1.</t>

       <t>In this way, the whole protocol is the same as current DNS transport in TCP 
        except the transport Port is moved to port 80 or 443. The difference between port 
        80 and 443 might be that the traffic of port 80 is usually intercepted as HTTP traffic 
        while the traffic of port 443 is usually concerned to be encrypted. One example transporting 
        DNS through port 80/443 is used by NLnetLabs as a feature of DNSSEC trigger <xref target="dnssec-trigger"/>.</t> 

      <t>Transporting DNS through port 80/443 is an easy implementation. Developers can 
        simply runs a DNS server by making its DNS software also listen to port 80/443. 
        The client can also apply this change without any significant change.</t>

      <t>The drawback of this approach is that it might mislead the client by the port it 
        used. For example, clients might think DNS over 443 as a private protocol because 
        normally the session would be encrypted. In this case, however, it isn't. That 
        might mislead some of the clients.</t>

      </section>

      <section title="DNS OVER TLS on port 443">

        <t>Another approach is DNS over TLS on port 443 also implemented in DNSSEC trigger 
          as an example. It is similar with [draft-ietf-dprive-dns-over-tls] which use a 
          well-known port 853 instead. Using port 443 to carry the traffic still serve the 
          purpose in use case 1 in which some middle boxes may not recognized the 
          new port.</t>

          <t>&lt; &lt; Davey note: or we can just recommend developer to follow 
            draft-ietf-dprive-dns-over-tls but using port 443 &gt;&gt;</t>

        <t>As specified in RFC 5246 <xref target="RFC5246"/>, both the DNS server 
          and client can be authenticated or not authenticated. The DNS service providers 
          can decide authenticated pattern on both server and client sides based on their 
          own requirement for security and privacy.</t>

        <t>TLS provide many benefits for DNS. First, it significantly reduces DNS conversation’s
         vulnerability of being hijacked. Second, it prevents resolvers from coming amplifier of 
         reflection attack. Additionally, it provides privacy by encrypted the conversation 
         between client and server. </t>
  
        <t>One concern of DNS over TLS is its cost. Compared to UDP, DNS-over-TCP requires an 
          additional round-trip-time (RTT) of latency to establish a TCP connection. Use of 
          TLS encryption algorithms results in slightly higher CPU usage. It should also be considered that 
          the DNS package over TLS on new port might be dropped by some middle boxes. Another 
          concern of TLS is its deployment difficulty for authenticated server. If servers need 
          to be authenticated, certificate management is needed.</t>
        
      </section>

      <section title="DNS BINARY over HTTP(S)">

         <t>Different from DNS over TCP on port 80/443, another option is encapsulating DNS 
          content into HTTP’s body and send them as HTTP(s) traffic. It is quiet useful in 
          use case 1&amp;2 described in introduction. This approach is that HTTP usually 
          makes it through even the worst coffee shop or hotel room firewalls, since commerce 
          may be at stake. We also benefit from HTTP's persistent TCP connection pool concept, 
          which DNS on TCP/53 does not have. Lastly, HTTPS will work, giving privacy.  </t>

          <t>The basic methodology works as follow:</t>
        <t>1. Client creates DNS query package.</t>
        <t>2. Client encapsulates DNS package in HTTP(S) package’s body and assignes parameters 
          in HTTP header.</t>
        <t>3. Client sends the package to Server.</t>
        <t>4. Server decapsulates HTTP package to DNS query and resolve it.</t>
        <t>5. Server encapsulates DNS Package in HTTP(S) and sends it back.</t>

        <t>Note that if the origin DNS query is sent by TCP, first two bits 
          of the package is TCP link and should be removed. There is an implementation of this 
          methodology in golang (https://github.com/BII-Lab/DNSoverHTTPinGO) as well as C
          (https://github.com/BII-Lab/DNSoverHTTP) maintain by BII lab</t>

        <t>In addition to the benefits mentioned before, the HTTP header makes DNS BINARY 
          HTTP(S) easy to extend. Comparing to creating a new option in EDNS0, using new 
          parameters in HTTP header is easier to deploy, since DNS package with EDNS0 might 
          not pass some middle boxes.</t>

        <t>The disadvantage of packaging DNS into HTTP might be its cost. Doing pack and unpack 
          costs CPU and may result in higher response time. The DNS over HTTP package also has 
          a risk of being dropped by some firewalls which intercepts HTTP packages. And it should 
          be noted that if HTTPS is used here, then all the discussion of TLS in previous section 
          is also applicable here.</t>
      </section>


      <section title="REST HTTP API">

        <t>As mentioned in use case 4, one motivation for REST HTTP API is for web developers 
          (good for javascript users) who need to get DNS information but cannot create 
          raw requests. They can work by creating HTTP requests other than real DNS queries</t>

        <t>In this implementation DNS data is exchange in other format than wire format, like 
          Json [draft-bortzmeyer-dns-json], or xml [draft-mohan-dns-query-xml]. There are also 
          a bunch of REST DNS API developed by DNS SPs like [DYN-REST-API] .You can google for 
          more.  </t>

         <t>Most of these APIs are developed in the scope of their own system with different 
          specification. But the common and starting part is that a client will request a special formatted URI. Usually there is a HTTP(s) server listen to 80/443 will parse the request 
          and create a DNS query or DNS operation command towards the real DNS. Different from DNS 
          BINARY over HTTP(S), once the HTTP(s) server receive the response, it create the response 
          putting DNS data into various format like Json, xml, yaml or even plain text.</t> 

        <t>However, this approach may confront suspects, because it is not based on 
          traditional DNS protocol. So there is no guarantee of the protocol's completeness 
          and correctness. The support of DNSSEC might also be a problem cause the response 
          usually do not contain RR records with the answer.</t>
    </section>

</section>

    <section title="Open issues">
    	<t>Other Naming experiment  etc</t>
    
    </section>
  
  </middle>

  <back>

    <references title="References">
      &RFC1035;&RFC5625;&RFC5246;
      &I-D.dnsop-cookies;&I-D.dnsop-respsize;

    <reference anchor="Fragment-Poisonous">
	            <front>
	                <title>Fragmentation Considered Poisonous</title>
			<author fullname="Herzberg, A."  initials="A." surname="Herzberg"></author>
			<author fullname=" H. Shulman"  initials="H." surname="Shulman"></author>
			<date year="2012" />            
	            </front>
	   </reference>
     
     <reference anchor="DOTSE" target="http://www.iis.se/docs/Routertester_en.pdf">
	        <front>
	                <title>DNSSEC Tests of Consumer Broadband Routers</title>
			<author fullname="Ahlund"></author>
			<author fullname="Wallstrom" ></author>
			<date year="2008" month="February" />            
	       	</front>
	   </reference>

		   <reference anchor="SAC035">
            <front>
                <title>DNSSEC Impact on Broadband Routers and Firewalls </title>
                <author>
                    <organization>ICANN Security and Stability Advisory Committee</organization>
                </author>
                <date year="2008" />
            </front>
     </reference>


      <reference anchor="dnssec-trigger" target="https://www.nlnetlabs.nl/projects/dnssec-trigger/">
          <front>
                  <title>DNSSEC Tests of Consumer Broadband Routers</title>
      <author ></author>
      <date  />
      </front>
     </reference>

      <reference anchor="DNS-over-TLS" target="https://datatracker.ietf.org/doc/draft-ietf-dprive-dns-over-tls/">
          <front>
                  <title>IETF DPRIVE WG</title>
      <author ></author>
      <date  />
      </front>
     </reference>
       </references>
  </back>
</rfc>






Internet Engineering Task Force                                  L. Song
Internet-Draft                                                   S. Kerr
Intended status: Experimental                                     R. Wan
Expires: June 2, 2016                         Beijing Internet Institute
                                                       November 30, 2015


                      DNS wire-format over HTTP(S)
                   draft-song-dns-wireformat-http-00

Abstract

   In order to bypass DNS misbehavior on the path by middleboxes, this
   memo introduces a way to tunnel DNS data on wire using HTTP(S).

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on June 2, 2016.

Copyright Notice

   Copyright (c) 2015 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.





Song, et al.              Expires June 2, 2016                  [Page 1]

Internet-Draft        DNS wire-format over HTTP(S)         November 2015


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Methodology and Configuration . . . . . . . . . . . . . . . .   3
   3.  DNS-over-HTTP Message Format  . . . . . . . . . . . . . . . .   4
     3.1.  Start-line  . . . . . . . . . . . . . . . . . . . . . . .   4
     3.2.  Header Fields . . . . . . . . . . . . . . . . . . . . . .   5
     3.3.  Message Body  . . . . . . . . . . . . . . . . . . . . . .   6
   4.  Considerations on DNS over HTTPS  . . . . . . . . . . . . . .   6
   5.  IANA considerations . . . . . . . . . . . . . . . . . . . . .   6
   6.  References  . . . . . . . . . . . . . . . . . . . . . . . . .   6
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .   7

1.  Introduction

   RFC 1035 [RFC1035] specifies the wire format for DNS messages.  It
   also specifies DNS transport on UDP and TCP on port 53, which is
   still used today.  However, there are other ways to access DNS
   database, for example in a different data format or via alternative
   DNS transport.  These approaches are summarized in [draft-shane-
   review-DNS-over-http].

   One of alternative way of DNS in this memo is to transport DNS binary
   data inside HTTP(S) to fulfill the goal of enhancing availability of
   DNS service.  The DNS traffic is simply disguised into Web traffic
   using port 80/443 over HTTP.  It can bypass stupid middle box like
   firewall, proxy or traffic sharping devices on path which may
   jeopardize normal DNS traffic by misbehavior[RFC5625]
   [DOTSE][SAC035].

   This approach has the advantage that HTTP usually makes it through
   even the worst coffee shop or hotel room firewalls, as this is
   expected by Internet users.  It also benefits from HTTP's support by
   default for persistent TCP connection for all request (see section
   6.3 in [RFC7230]).  Note that 5966bis [I-D.ietf-dnsop-5966bis]
   specifies the persistent feature for DNS on TCP port 53, but current
   DNS software does not support this mode of operation.  Finally HTTPS
   provides data integrity and privacy.

   Unlike a REST DNS API using JSON [I-D.bortzmeyer-dns-json] or XML
   [I-D.mohan-dns-query-xml] encoding for DNS data, wire-format data is
   wrapped with a HTTP header and transmitted on port 80 or 443.  This
   protocol is not designed with web developers or advanced usage in
   application development in mind.  It simply serves as a sort of DNS
   VPN which dose not require extra parsing of another format of DNS
   data.





Song, et al.              Expires June 2, 2016                  [Page 2]

Internet-Draft        DNS wire-format over HTTP(S)         November 2015


   This memo aims to introduce how the DNS binary over HTTP(s) concept
   works.  Hopefully implementations by different developers following
   this demo can speak with each other.

   This mechanism is designed for client stub resolver to recursive
   server.  DNS zone transfer is out-of-scope for this document.

2.  Methodology and Configuration

   As it is mentioned in introduction, the basic methodology is wrapping
   the DNS wire-format data into HTTP(S) header and transmitted on port
   80 or 443.  However, there are two configuration scenarios for
   implementation.

   Scenario 1:

   The DNS implementation handles DNS queries and responses via both UDP
   and TCP on port 53, and HTTP(S) on port 80 or 443.  That means new
   functionality is added to existing DNS software as a built-in API.
   It works as follows:

   1.  The client creates a DNS query message.

   2.  The client encapsulates the DNS message in a HTTP(S) message body
       and assigns parameters with the HTTP header.

   3.  The client connects to the server and issues an HTTP(S) POST
       request method.

   4.  The server decapsulates the HTTP package to DNS query, and
       resolves the DNS query.

   5.  The server encapsulates the DNS response in HTTP(S) and sends it
       back via the HTTP(S) session.

   Scenario 2:

   In this scenario there is a DNS-HTTP proxy (server and client)
   sitting between stub-resolver and the recursive server.  It works
   like a DNS VPN and transmits wire-format DNS messages over HTTP(S)
   between the proxy client and a server, as follows:

   1.  The stub-resolver sends a DNS query (over UDP or TCP) to the
       proxy client.

   2.  The proxy client encapsulates the DNS message in a HTTP(S)
       message body and assigns parameters with the HTTP header.




Song, et al.              Expires June 2, 2016                  [Page 3]

Internet-Draft        DNS wire-format over HTTP(S)         November 2015


   3.  The proxy client connects to the proxy server and issues an
       HTTP(S) POST request method.

   4.  The proxy server decapsulates the HTTP package to DNS query, and
       sends it to a real DNS server over UDP/TCP.

   5.  The proxy server encapsulates the DNS response in HTTP(S) and
       sends it back via the HTTP(S) session.

   6.  The proxy client decapsulates the DNS message from HTTP(s)
       response and sends it back to the stub-resolver via previous DNS
       session (over UDP or TCP).

   Note that the proxy client can be implemented listening to a loop-
   back address in the same host with stub-resolver.  The proxy server
   can be implemented as a caching server as well.  It is also possible
   to use the proxy server as a regular web server at the same time that
   is is acting as a proxy server.

3.  DNS-over-HTTP Message Format

   In HTTP 1.1 specification section 3 in RFC 7230 [RFC7230], an HTTP
   message consists of three parts: start-line, header fields, and
   message body with an empty line between header fields and message
   body.  The DNS over HTTP message also contains these parts.

3.1.  Start-line

   By definition the HTTP start-line is either a request-line (for
   requests) or a status-line (for responses).  Request-line consists of
   request method, request-target, and HTTP-version with a CRLF in the
   end.

   For DNS query over HTTP, the request is always POST [section 4.3.3 in
   RFC 7230 [RFC7230]].  Note if a GET is sent to the server, it
   optionally returns a human-readable page showing its web server
   environment.

   Usually the target URI is provides explicitly by the DNS services
   provider.  Derived from the target URI, the request-target in
   request-line identifies the target resource upon which to apply the
   request.  In the case of DNS query over HTTP, one approach is to
   always use a fixed string for request-target by default, like "/dns-
   over-http".  It works given there is no other resource sharing the
   same request-target name, otherwise there may be a conflict.  Another
   approach is to allow the server to use a defined URI which contains
   the specific request-target.  In the BII proxy implementation, we use
   "/proxy_dns" for this purpose.



Song, et al.              Expires June 2, 2016                  [Page 4]

Internet-Draft        DNS wire-format over HTTP(S)         November 2015


   The HTTP-version is always "HTTP/1.1".  So the request-line is :

   POST /dns-over-http HTTP/1.1

   Regard to status-line, it returns status-code [Section 6 of RFC 7231
   [RFC7231]] which only reflects status of HTTP connection.  If the
   request has succeeded, the status-line is:

   HTTP/1.1 200 OK

   If the request fails, the proxy server will supply an appropriate
   error code, typically 4xx (client error) if the client has provided a
   query that the server cannot understand for some reasons, or 5xx
   (server error) if some server-side problem prevented a query from
   succeeding.

3.2.  Header Fields

   By definition header fields are key:value pairs that can be used to
   communicate data about the message, its payload, the target resource,
   or the connection (for example control data).  Considering the proxy
   configuration in scenario 2, we use a new header field:

   Proxy-DNS-Transport: xyz

   Where xyz is either UDP or TCP, which is the client's indication of
   how it received the underlying DNS query, and which the server will
   use when sending the query to the far-end DNS server.  This means if
   a stub DNS client asks for TCP, then that's what the far-end DNS
   server will see, and likewise for UDP.  This header field is used for
   both request and response, for all DNS over HTTP message.

   Davey: I encounter a question here.  Does this memo just document the
   way of proxy-dns or a general protocol for DNS Binary over HTTP(s).
   If we target the general protocol format the proxy-dns is just one
   implementation case.  And the Proxy-DNS-Transport header field is
   optional.

   Shane: I think we should document our specific protocol.  There are
   an unlimited number of ways of doing things, and listing many options
   actually makes it harder on implementors, not easier!

   Davey: Do we need to document other header fields and controls? or
   simple say use the default configuration? what's default?

   Shane: My own feeling is "no".  I don't know what the standard
   practice in documenting such things is.  Hopefully Paul has a
   recommendatin...



Song, et al.              Expires June 2, 2016                  [Page 5]

Internet-Draft        DNS wire-format over HTTP(S)         November 2015


3.3.  Message Body

   As was mentioned, the message body is DNS wire-format data.

   It is worth mentioning that DNS messages sent over TCP connections is
   prefixed with a two-byte length field which gives the message
   length[section 4.2.2 in RFC 1035 [RFC1035]], excluding the two-byte
   length field.  This length field allows the low-level processing to
   assemble a complete message before beginning to parse it.  In the
   context of HTTP, there is content-length header filed [section 3.3.2
   in RFC 7230 [RFC7230]]in which the field-value is the same with two
   bytes length field in DNS over TCP.

   In normal configuration, both client and server should assign a value
   for the DNS message length to HTTP content-length field.  In proxy
   configuration, if Proxy-DNS-Transport is TCP, the proxy must aware
   the two-byte length field in DNS message over TCP before it handle
   HTTP request and response.

4.  Considerations on DNS over HTTPS

   As specified in RFC 5246 [RFC5246], both the DNS server and client
   can be authenticated or not authenticated.  The DNS service providers
   can decide authenticated pattern on both server and client sides
   based on their own requirement for security and privacy.  For an open
   resolver, clients do not require authentication.

5.  IANA considerations

   Registration for a new header field: Proxy-DNS-Transport

6.  References

   [DOTSE]    and , "DNSSEC Tests of Consumer Broadband Routers",
              February 2008,
              <http://www.iis.se/docs/Routertester_en.pdf>.

   [I-D.bortzmeyer-dns-json]
              Bortzmeyer, S., "JSON format to represent DNS data",
              draft-bortzmeyer-dns-json-01 (work in progress), February
              2013.

   [I-D.ietf-dnsop-5966bis]
              Dickinson, J., Dickinson, S., Bellis, R., Mankin, A., and
              D. Wessels, "DNS Transport over TCP - Implementation
              Requirements", draft-ietf-dnsop-5966bis-04 (work in
              progress), November 2015.




Song, et al.              Expires June 2, 2016                  [Page 6]

Internet-Draft        DNS wire-format over HTTP(S)         November 2015


   [I-D.mohan-dns-query-xml]
              Parthasarathy, M. and P. Vixie, "Representing DNS messages
              using XML", draft-mohan-dns-query-xml-00 (work in
              progress), September 2011.

   [RFC1035]  Mockapetris, P., "Domain names - implementation and
              specification", STD 13, RFC 1035, DOI 10.17487/RFC1035,
              November 1987, <http://www.rfc-editor.org/info/rfc1035>.

   [RFC5246]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", RFC 5246,
              DOI 10.17487/RFC5246, August 2008,
              <http://www.rfc-editor.org/info/rfc5246>.

   [RFC5625]  Bellis, R., "DNS Proxy Implementation Guidelines",
              BCP 152, RFC 5625, DOI 10.17487/RFC5625, August 2009,
              <http://www.rfc-editor.org/info/rfc5625>.

   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Message Syntax and Routing",
              RFC 7230, DOI 10.17487/RFC7230, June 2014,
              <http://www.rfc-editor.org/info/rfc7230>.

   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Semantics and Content", RFC 7231,
              DOI 10.17487/RFC7231, June 2014,
              <http://www.rfc-editor.org/info/rfc7231>.

   [SAC035]   ICANN Security and Stability Advisory Committee, "DNSSEC
              Impact on Broadband Routers and Firewalls", 2008.

Authors' Addresses

   Linjian Song
   Beijing Internet Institute
   2508 Room, 25th Floor, Tower A, Time Fortune
   Beijing  100028
   P. R. China

   Email: songlinjian@gmail.com
   URI:   http://www.biigroup.com/










Song, et al.              Expires June 2, 2016                  [Page 7]

Internet-Draft        DNS wire-format over HTTP(S)         November 2015


   Shane Kerr
   Beijing Internet Institute
   2/F, Building 5, No.58 Jinghai Road, BDA
   Beijing  100176
   CN

   Email: shane@biigroup.cn
   URI:   http://www.biigroup.com/


   Runxia Wan
   Beijing Internet Institute
   2508 Room, 25th Floor, Tower A, Time Fortune
   Beijing  100028
   P. R. China

   Email: rxwan@biigroup.cn
   URI:   http://www.biigroup.com/

































Song, et al.              Expires June 2, 2016                  [Page 8]
